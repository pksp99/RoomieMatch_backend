openapi: 3.0.3
info:
  title: Roommate Finder API
  description: |-
    API for managing user information for a Roommate Finder application
  version: 1.0.1
servers:
  - url: https://roomieMatch.edu/api/v1
tags:
  - name: Users
    description: Everything about your Users
  - name: Health Check
    description: Health Check

paths:
  /users:
    get:
      security:
        - APIKeyAuth: [ ]
      parameters:
        - in: header
          name: x-userId
          description: User ID of the authenticated user
          schema:
            type: string
            example: USXXXXXXXXXXXXXXXXX
          required: true
        - in: query
          name: isRecommendedUsers
          schema:
            type: boolean
            default: true


      tags:
        - Users
      operationId: getUserGroupsList
      summary: Get list of users
      description: Returns a list of all users with some key highlighted information.
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserGroupsResponse"

    post:
      security:
        - APIKeyAuth: [ ]
      parameters:
        - in: header
          name: x-userId
          description: User ID of the authenticated user
          schema:
            type: string
            example: USXXXXXXXXXXXXXXXXX
          required: true
      tags:
        - Users
      operationId: createUser
      summary: Create new user
      description: Creates a new user with the provided data.
      requestBody:
        description: User object to be created
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCreatedResponse"

        400:
          description: Bad Request
        500:
          description: Internal Server Error

  /users/{userId}:

    parameters:
      - name: userId
        in: path
        description: ID of the user
        required: true
        schema:
          type: string
          example: USXXXXXXXXXXXXXXXXX
    get:
      security:
        - APIKeyAuth: [ ]
      parameters:
        - in: header
          name: x-userId
          description: User ID of the authenticated user
          schema:
            type: string
            example: USXXXXXXXXXXXXXXXXX
          required: true
      tags:
        - Users
      operationId: getUserDetail
      summary: Get user detail
      description: Returns the detailed information for a user with the specified ID.
      responses:
        200:
          description: User detail
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Bad Request
        500:
          description: Internal Server Error
    patch:
      security:
        - APIKeyAuth: [ ]
      parameters:
        - in: header
          name: x-userId
          description: User ID of the authenticated user
          schema:
            type: string
            example: USXXXXXXXXXXXXXXXXX
          required: true
      tags:
        - Users
      operationId: updateUser
      summary: Update user
      description: Updates an existing user with the provided data.
      requestBody:
        description: User object to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserAttributes"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Bad Request
        500:
          description: Internal Server Error

  /like/{groupId}:
    parameters:
      - name: groupId
        in: path
        description: group ID of the user that is liked.
        required: true
        schema:
          type: string
          example: GRXXXXXXXXXXXXXXXXX
    post:
      security:
        - APIKeyAuth: [ ]

      operationId: likeGroup
      parameters:
        - in: header
          name: x-userId
          description: User ID of the authenticated user
          schema:
            type: string
            example: USXXXXXXXXXXXXXXXXX
          required: true
      tags:
        - Like/Dislike
      responses:
        200:
          description: Like Object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LikeResponse"

  /dislike/{groupId}:
    parameters:
      - name: groupId
        in: path
        description: group ID of the user that is liked.
        required: true
        schema:
          type: string
          example: GRXXXXXXXXXXXXXXXXX
    post:
      security:
        - APIKeyAuth: [ ]
      operationId: dislikeGroup
      parameters:
        - in: header
          name: x-userId
          description: User ID of the authenticated user
          schema:
            type: string
            example: USXXXXXXXXXXXXXXXXX
          required: true
      tags:
        - Like/Dislike
      responses:
        201:
          description: done

  /like:
    get:
      security:
        - APIKeyAuth: [ ]
      operationId: getLikes
      parameters:
        - in: header
          name: x-userId
          description: User ID of the authenticated user
          schema:
            type: string
            example: USXXXXXXXXXXXXXXXXX
          required: true
      tags:
        - Like/Dislike
      responses:
        200:
          description: List of Group Ids liked by the user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupList"

  /undismiss/{groupId}:
    parameters:
      - name: groupId
        in: path
        description: group ID of the user that is undismissed.
        required: true
        schema:
          type: string
          example: GRXXXXXXXXXXXXXXXXX
    post:
      security:
        - APIKeyAuth: [ ]

      operationId: undismissGroup
      parameters:
        - in: header
          name: x-userId
          description: User ID of the authenticated user
          schema:
            type: string
            example: USXXXXXXXXXXXXXXXXX
          required: true
      tags:
        - Dismiss/Undismiss
      responses:
        201:
          description: done

  /dismiss/{groupId}:
    parameters:
      - name: groupId
        in: path
        description: group ID of the user that is dismissed.
        required: true
        schema:
          type: string
          example: GRXXXXXXXXXXXXXXXXX
    post:
      security:
        - APIKeyAuth: [ ]
      operationId: dismissGroup
      parameters:
        - in: header
          name: x-userId
          description: User ID of the authenticated user
          schema:
            type: string
            example: USXXXXXXXXXXXXXXXXX
          required: true
      tags:
        - Dismiss/Undismiss
      responses:
        201:
          description: done

  /dismiss:
    get:
      security:
        - APIKeyAuth: [ ]
      operationId: getDismisses
      parameters:
        - in: header
          name: x-userId
          description: User ID of the authenticated user
          schema:
            type: string
            example: USXXXXXXXXXXXXXXXXX
          required: true
      tags:
        - Dismiss/Undismiss
      responses:
        200:
          description: List of Group Ids dismissed by the user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupList"


  /makegroup:
    post:
      tags:
        - Groups
      summary: Make Group Endpoint
      description: Join two grounps
      security:
        - APIKeyAuth: [ ]
      operationId: makeGroup
      parameters:
        - in: query
          name: group_id_1
          description: User ID of the authenticated user
          schema:
            type: string
            example: USXXXXXXXXXXXXXXXXX
          required: true

        - in: query
          name: group_id_2
          description: User ID of the authenticated user
          schema:
            type: string
            example: USXXXXXXXXXXXXXXXXX
          required: true

      responses:
        201:
          description: done


  /healthcheck:
    get:
      tags:
        - Health Check
      summary: Healthcheck endpoint
      description: Returns the status of the API.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthcheckResponse"
components:
  schemas:
    HealthcheckResponse:
      type: object
      properties:
        healthcheck:
          type: string
          enum: [ success, fail ]

    GroupList:
      type: object
      required:
        - groups
      properties:
        groups:
          type: array
          items:
            type: object
            description: Group Info.
            required:
              - groupId
              - user_ids
              - user_names
            properties:
              groupId:
                type: string
                example: GRXXXXXXXXXXXXXXXXXXX
                description: Unique group ID.
              user_ids:
                type: array
                items:
                  type: string
              user_names:
                type: array
                items:
                  type: string


    LikeResponse:
      type: object
      required:
        - mutual_like
      properties:
        mutual_like:
          type: boolean
        group:
          type: object
          description: If it is a mutual like, this property is expected.
          required:
            - groupId
            - user_ids
            - user_names
          properties:
            groupId:
              type: string
              example: GRXXXXXXXXXXXXXXXXXXX
              description: Unique group ID.
            user_ids:
              type: array
              items:
                type: string
            user_names:
              type: array
              items:
                type: string



    GetUserGroupsResponse:
      type: object
      required:
        - userGroups
      properties:
        userGroups:
          type: array
          items:
            $ref: "#/components/schemas/UserGroup"

    UserGroup:
      type: object
      required:
        - users
      allOf:
        - $ref: "#/components/schemas/Group"
        - type: object
          properties:
            users:
              type: array
              items:
                $ref: "#/components/schemas/User"

    Group:
      type: object
      required:
        - groupId
        - user_count
        - user_ids
      properties:
        groupId:
          type: string
          example: GRXXXXXXXXXXXXXXXXXXX
          description: Unique group ID.
        group_info:
          type: string
        user_count:
          type: integer
          minimum: 1
          maximum: 8
          example: 1
        user_ids:
          type: array
          items:
            type: string
            example: USXXXXXXXXXXXXXXXXXXX

    UserCreatedResponse:
      type: object
      required:
        - userId
      properties:
        userId:
          type: string
          description: ID of the user upon creation.
          example: USXXXXXXXXXXXXXXXXXXX

    User:
      type: object
      required:
        - userId
        - email
        - user_attributes
        - groupId
      properties:
        userId:
          type: string
          example: USXXXXXXXXXXXXXXXXXXX
        email:
          type: string
          format: email
        groupId:
          type: string

          description: If user has joined any group, it will represent it's group id.
          example: GRXXXXXXXXXXXXXXXXXXX
        user_attributes:
          $ref: "#/components/schemas/UserAttributes"
        preferred_attributes:
          $ref: "#/components/schemas/PreferredAttributes"




    UserAttributes:
      type: object
      required:
        - name
        - intro
        - profile_image
        - cover_images
        - major
        - gender
        - monthly_budget
        - cleanliness
        - sleep_schedule
        - date_available
      properties:
        name:
          type: string
          description: Name of the User
          example: John Snow

        intro:
          type: string
          description: A single line of intro for the user.
          example: You will be lucky to have me as a roommate.

        profile_image:
          type: string
          description: Link for user's profile Image.
          format: url
          example: https://roomiematch/images/usfdflffso.jpg

        gender:
          type: string
          enum: [ male, female, other]
          description: User's gender
        age:
          type: integer
          minimum: 18
          maximum: 100
          description: User's age

        monthly_budget:
          type: integer
          minimum: 300
          maximum: 2000
          description: Monthly budget of the user.

        major:
          type: string
          description: User's major or field of study
          enum: [ "Business Administration",  "Computer Science",  "Psychology",  "Nursing",  "Education",  "Biology",  "Engineering",  "Communications",  "Political Science",  "English Literature",  "Mathematics",  "History",  "Economics",  "Sociology",  "Art and Design",  "Environmental Science/Studies",  "Marketing",  "Physics",  "Chemistry",  "Foreign Languages and Literatures" ]
        date_available:
          type: string
          format: date
          description: Date of availability
        food_preference:
          type: string
          description: User's food preference
          default: No Preference
          enum: [ Vegetarian, Vegan, Jain, Gluten-Free, No Preference ]

        cover_images:
          type: array
          description: Link for user's cover images.
          items:
            type: object
            properties:
              image_url:
                type: string
                format: url
                example: https://roomiematch/images/usfdflffso.jpg

        bio:
          type: string
          description: User's bio or description

        hobbies:
          type: array
          items:
            type: string
          description: User's hobbies or interests
        cleanliness:
          type: integer
          minimum: 1
          maximum: 5
          description: User's cleanliness rating (1=very messy, 5=very clean)
        sleep_schedule:
          type: string
          enum: [ early_bird, night_owl, somewhere_in_between ]
          description: User's preferred sleep schedule
        smoking:
          type: boolean
          default: false
          description: Whether the user smokes or not
        partying:
          type: boolean
          default: false
          description: Whether the user likes to party or not
        pet_friendly:
          type: boolean
          default: false
          description: Whether the user is okay with living with pets or not

    PreferredAttributes:
      type: object
      properties:
        gender:
          type: string
          enum: [ male, female, other]
          description: User's gender
        hobbies:
          type: array
          items:
            type: string
          description: User's hobbies or interests
        food_preference:
          type: string
          description: User's food preference
          enum: [ Vegetarian, Vegan, Jain, Gluten-Free, No Preference ]
        cleanliness:
          type: integer
          minimum: 1
          maximum: 5
          description: User's cleanliness rating (1=very messy, 5=very clean)
        sleep_schedule:
          type: string
          enum: [ early_bird, night_owl, somewhere_in_between ]
          description: User's preferred sleep schedule
        smoking:
          type: boolean
          description: Whether the user smokes or not
        partying:
          type: boolean
          description: Whether the user likes to party or not
        pet_friendly:
          type: boolean
          description: Whether the user is okay with living with pets or not


  securitySchemes:
    APIKeyAuth:
      type: apiKey
      name: authorization
      in: header